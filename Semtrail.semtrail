(semtrail "Semtrail"

  (config
    ;; See https://html-color.codes/

    (nodeType :constraint "Constraint" "#cccccc")                         ;; grey
    (nodeType :functional-requirement "Functional requirement" "#cccc00") ;; yellow
    (nodeType :quality-attribute "Quality attribute" "#ee82ee")           ;; violet
    (nodeType :assumption "Assumption" "#ff5349")                         ;; red
    (nodeType :fact "Fact" "#32cd32")                                     ;; green
    (nodeType :concept "Concept" "#f4a460")                               ;; brown
    (nodeType :technology "Technology" "#00bfff")                         ;; blue

    (edgeType :consequence "Consequence" "#adff2f")                       ;; light green
    (edgeType :decision "Decision" "#32cd32")                             ;; dark green
    (edgeType :derivation "Derivation" "#ffa500")                         ;; orange
    (edgeType :option "Option" "#cccccc")                                 ;; grey
  )

  ;; General condition

  (node "Known programming languages" :constraint {
    :doc "We have focus on DSLs and semantic tree and do not want to learn a new language"
  })

  (node "Learn something" :constraint {
    :doc "We want to do something we did not do before and learn from it"
  })

  ;; Functional requirements

  (node "Runs everywhere" :functional-requirement {
    :doc "Should work on any developer computer"
  })

  (node "Clojure syntax" :functional-requirement {
    :doc "We want a Clojure-like syntax for the DSL"
  })

  (edge "Learn something" :decision "Clojure syntax")

  (node "Software must be build" :functional-requirement {
    :doc "The software must be build"
  })

  ;; Quality requirements

  (node "Simple" :quality-attribute {
    :doc "The solution must be simple"
  })

  (node "High reuse" :quality-attribute {
    :doc "The solution must maximise reuse"
  })

  (node "Maintainability" :quality-attribute {
    :doc "We want to be able to reproduce and debug problems of users"
  })

  (node "Simple hosting" :quality-attribute {
    :doc "It should be simple for the users to show the resulting web pages"
  })

  (node "Easy to build" :quality-attribute {
    :doc "Should be easy to build"
  })

  (node "Use automation" :quality-attribute {
    :doc "We should use automation as much as possible"
  })

  ;; Facts

  (node "Java Knowledge" :fact {
    :doc "We know Java"
  })

  (edge "Known programming languages" :option "Java Knowledge")

  (node "Kotlin Knowledge" :fact {
    :doc "We know Kotlin"
  })

  (edge "Known programming languages" :option "Kotlin Knowledge")

  (node "C++ Knowledge" :fact {
    :doc "We know C++"
  })

  (edge "Known programming languages" :option "C++ Knowledge")

  ;; Concepts

  (node "Command line application" :concept {
    :doc "Use of a simple ext-based command line application"
  })

  (edge "Simple" :derivation "Command line application")

  (node "Logging" :concept {
    :doc "Use logging to inform user of application process and errors"
  })

  (node "Configurable" :concept {
    :doc "Realzing configurable software"
  })

  (edge "High reuse" :derivation "Configurable")

  (node "DSL" :concept {
    :doc "Use of a DSL"
  })

  (edge "Configurable" :derivation "DSL")
  (edge "Simple" :derivation "DSL")
  (edge "Clojure syntax" :derivation "DSL")

  (node "Logging-Framework" :concept {
    :doc "Concrete framework to implement logging"
  })

  (edge "Maintainability" :derivation "Logging")

  (node "JVM language" :concept {
    :doc "Use of the JVM execution environment"
  })

  (edge "Runs everywhere" :derivation "JVM language")

  (node "Container" :concept {
    :doc "Use of modern Linux container technology"
  })

  (edge "Simple hosting" :derivation "Container")

  (node "Use CI CD" :concept {
    :doc "We want to make use of a CI/CD process"
  })

  (edge "Use automation" :derivation "Use CI CD")

  (node "Build system" :concept {
    :doc "Simplifies building software"
  })

  (edge "Easy to build" :derivation "Build system")
  (edge "Use automation" :derivation "Build system")
  (edge "Software must be build" :derivation "Build system")

  ;; Technology

  (node "GitHub Actions" :technology {
    :doc "CI/CD integration of GitHub"
  })

  (edge "Use CI CD" :decision "GitHub Actions")

  (node "Docker" :technology {
    :doc "Use Docker with NGINX to host the resulting web pages"
  })

  (node "NGINX" :technology {
    :doc "Use Docker with NGINX to host the resulting web pages"
  })

  (edge "Container" :decision "Docker")
  (edge "Container" :decision "NGINX")

  ;; Frameworks and tools

  (edge "Logging" :derivation "Logging-Framework")

  ;; Technology

  (node "Maven" :technology {
    :doc "Common build system"
  })

  (node "Gradle" :technology {
    :doc "Common build system"
  })

  (edge "Build system" :decision "Maven")
  (edge "Build system" :option "Gradle")

  (node "Kotlin-Logging" :technology {
    :doc "Kotlin-specific logging framework based on slf4j"
  })

  (edge "Logging-Framework" :decision "Kotlin-Logging")

  (node "Kotlin" :technology {
    :doc "New programming language on top of JVM"
  })

  (edge "Known programming languages" :decision "Kotlin")
  (edge "JVM language" :decision "Kotlin")

  (report
    (nodesTable "All")
    (allNodesImage)

    ;; Overview per node type

    (nodesTable "Constraint" {
      :types '(:constraint)
    })

    (nodesTable "Functional Requirement" {
      :types '(:functional-requirement)
    })

    (nodesTable "Quality Attributes" {
      :types '(:quality-attribute)
    })

    (nodesTable "Assumptions" {
      :types '(:assumption)
    })

    (nodesTable "Facts" {
      :types '(:fact)
    })

    (nodesTable "Concepts" {
      :types '(:concept)
    })

    (nodesTable "Technology" {
      :types '(:technology)
    })

    ;; Special views

    (starterTable)
    (leavesTable)
    (mostCausesTable)
    (mostConsequencesTable)
    (mostConnectedTable)

    ;; Checks

    (orphansTable)
    (noDocTable)
  )
)
