(semtrail "Semtrail"

  (config {
    :nodeTypes (
      :general-condition
      :functional-requirement
      :quality-attribute
      :assumption
      :fact
      :concept
      :technology
    )

    :edgeTypes (
      :consequence
      :decision
      :derivation
      :option
    )

    :nodeTypeNames {
        :general-condition      "General condition"
        :functional-requirement "Functional requirement"
        :quality-attribute      "Quality attribute"
        :assumption             "Asumption"
        :fact                   "Fact"
        :concept                "Concept"
        :technology             "Technology"
    }

    ;; See https://html-color.codes/

    :nodeTypeColors {
        :general-condition      "#cccccc" ;; grey
        :functional-requirement "#cccc00" ;; yellow
        :quality-attribute      "#ee82ee" ;; violett
        :assumption             "#ff5349" ;; red
        :fact                   "#32cd32" ;; green
        :concept                "#f4a460" ;; brown
        :technology             "#00bfff" ;; blue
    }

    :edgeTypeNames {
      :consequence "Consequence"
      :decision    "Decision"
      :derivation  "Derivation"
      :option      "Option"
    }

        :edgeTypeColors {
        :consequence "#adff2f" ;; light green
        :decision    "#32cd32" ;; dark green
        :derivation  "#ffa500" ;; orange
        :option      "#cccccc" ;; grey
    }
  })

  ;; General condition

  (node "Known programming languages" {
    :type :general-condition
    :doc "We have focus on DSLs and semantic tree and do not want to learn a new language"
  })

  (node "Learn something" {
    :type :general-condition
    :doc "We want to do something we did not do before and learn from it"
  })

  ;; Functional requirements

  (node "Runs everywhere" {
    :type :functional-requirement
    :doc "Should work on any developer computer"
  })

  (node "Clojure syntax" {
    :type :functional-requirement
    :doc "We want a Clojure-like syntax for the DSL"
  })

  (edge "Learn something" :decision "Clojure syntax")

  (node "Software must be build" {
    :type :functional-requirement
    :doc "The somftware must be build"
  })

  ;; Quality requirements

  (node "Simple" {
    :type :quality-attribute
    :doc "The solution must be simple"
  })

  (node "High reuse" {
    :type :quality-attribute
    :doc "The solution must maximise reuse"
  })

  (node "Maintainability" {
    :type :quality-attribute
    :doc "We want to be able to reproduce and debug problems of users"
  })

  (node "Simple hosting" {
    :type :quality-attribute
    :doc "It should be simple for the users to show the resulting web pages"
  })

  (node "Easy to build" {
    :type :quality-attribute
    :doc "Should be easy to build"
  })

  (node "Use automation" {
    :type :quality-attribute
    :doc "We should use automation as much as possible"
  })

  ;; Facts

  (node "Java Knowledge" {
    :type :fact
    :doc "We know Java"
  })

  (edge "Known programming languages" :option "Java Knowledge")

  (node "Kotlin Knowledge" {
    :type :fact
    :doc "We know Kotlin"
  })

  (edge "Known programming languages" :option "Kotlin Knowledge")

  (node "C++ Knowledge" {
    :type :fact
    :doc "We know C++"
  })

  (edge "Known programming languages" :option "C++ Knowledge")

  ;; Concepts

  (node "Command line application" {
    :type :concept
    :doc "Use of a simple ext-based command line application"
  })

  (edge "Simple" :derivation "Command line application")

  (node "Logging" {
    :type :concept
    :doc "Use logging to inform user of application process and errors"
  })

  (node "Configurable" {
    :type :concept
    :doc "Realzing configurable software"
  })

  (edge "High reuse" :derivation "Configurable")

  (node "DSL" {
    :type :concept
    :doc "Use of a DSL"
  })

  (edge "Configurable" :derivation "DSL")
  (edge "Configurable" :derivation "DSL")
  (edge "Simple" :derivation "DSL")
  (edge "Clojure syntax" :derivation "DSL")

  (node "Logging-Framework" {
    :type :concept
    :doc "Concrete framework to implement logging"
  })

  (edge "Maintainability" :derivation "Logging")

  (node "JVM language" {
    :type :concept
    :doc "Use of the JVM execution environment"
  })

  (edge "Runs everywhere" :derivation "JVM language")

  (node "Container" {
    :type :concept
    :doc "Use of modern Linux container technology"
  })

  (edge "Simple hosting" :derivation "Container")

  (node "Use CI CD" {
    :type :concept
    :doc "We want to make use of a CI/CD process"
  })

  (edge "Use automation" :derivation "Use CI CD")

  (node "Build system" {
    :type :concept
    :doc "Simplifies building software"
  })

  (edge "Easy to build" :derivation "Build system")
  (edge "Use automation" :derivation "Build system")
  (edge "Software must be build" :derivation "Build system")

  ;; Technology

  (node "GitHub Actions" {
    :type :technology
    :doc "CI/CD integration of GitHub"
  })

  (edge "Use CI CD" :decision "GitHub Actions")

  (node "Docker" {
    :type :technology
    :doc "Use Docker with NGINX to host the resulting web pages"
  })

  (node "NGINX" {
    :type :technology
    :doc "Use Docker with NGINX to host the resulting web pages"
  })

  (edge "Container" :decision "Docker")
  (edge "Container" :decision "NGINX")

  ;; Frameworks and tools

  (edge "Logging" :derivation "Logging-Framework")

  ;; Technologie

  (node "Maven" {
    :type :technology
    :doc "Common build system"
  })

  (node "Gradle" {
    :type :technology
    :doc "Common build system"
  })

  (edge "Build system" :decision "Maven")
  (edge "Build system" :option "Gradle")

  (node "Kotlin-Logging" {
    :type :technology
    :doc "Kotlin-specific loging framework based on slf4j"
  })

  (edge "Logging-Framework" :decision "Kotlin-Logging")

  (node "Kotlin" {
    :type :technology
    :doc "New programming language on top of JVM"
  })

  (edge "Known programming languages" :decision "Kotlin")
  (edge "JVM language" :decision "Kotlin")
)
